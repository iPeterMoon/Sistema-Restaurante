package itson.sistemarestaurantepresentacion.paneles;

import java.awt.Font;
import java.util.List;

import javax.swing.Box;
import javax.swing.JOptionPane;

import itson.sistemarestaurantedominio.Cliente;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantenegocio.factory.ObjetosNegocioFactory;
import itson.sistemarestaurantenegocio.interfaces.IClientesBO;
import itson.sistemarestaurantepresentacion.modales.ModalClientes;

/**
 *
 * @author pc
 */
public class PnlBusquedaCliente extends javax.swing.JPanel {

    private Cliente clienteSeleccionado = null;
    private boolean selectionMode = false;
    private ModalClientes modalClientes;
    /**
     * Creates new form PnlBusquedaCliente
     */
    public PnlBusquedaCliente() {
        initComponents();
        if (!java.beans.Beans.isDesignTime()) {
            cargarClientes();
        }
    }

    /**
     * Método para cargar los clientes en el panel pnlClientes. Este método debe
     * ser llamado después de inicializar el componente.
     */
    private void cargarClientes() {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        try {
            List<Cliente> clientes = clientesBO.obtenerClientesFrecuentes();
            cargarPanelesClientes(clientes);
        } catch (NegocioException ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Metodo para cargar los paneles de cada cliente dados por una lista
     *
     * @param clientes lista de clientes a cargar
     */
    private void cargarPanelesClientes(List<Cliente> clientes) {
        pnlClientes.removeAll();
        if (selectionMode) {
            for (Cliente cliente : clientes) {
                PnlCliente pnlCliente = new PnlCliente(this, cliente);
                pnlClientes.add(pnlCliente);
                pnlClientes.add(Box.createVerticalStrut(30));
            }
        } else {

            for (Cliente cliente : clientes) {
                PnlCliente pnlCliente = new PnlCliente(cliente);
                pnlClientes.add(pnlCliente);
                pnlClientes.add(Box.createVerticalStrut(30));
            }
        }
        pnlClientes.repaint();
        pnlClientes.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        campoTextoNombre = new javax.swing.JTextField();
        campoTextoCorreo = new javax.swing.JTextField();
        campoTextoTelefono = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlClientes = new javax.swing.JPanel();

        setBackground(new java.awt.Color(31, 31, 31));

        campoTextoNombre.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoNombre.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoNombre.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoNombre.setText("Buscar por Nombre");
        campoTextoNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoNombreMouseClicked(evt);
            }
        });

        campoTextoCorreo.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoCorreo.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoCorreo.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoCorreo.setText("Buscar por Correo");
        campoTextoCorreo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoCorreoMouseClicked(evt);
            }
        });

        campoTextoTelefono.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoTelefono.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoTelefono.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoTelefono.setText("Buscar por Telefono");
        campoTextoTelefono.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoTelefonoMouseClicked(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(80, 205, 137));
        btnBuscar.setFont(new Font("Poppins", Font.PLAIN, 16));
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        pnlClientes.setBackground(new java.awt.Color(31, 31, 31));
        pnlClientes.setLayout(new javax.swing.BoxLayout(pnlClientes, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pnlClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoTextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(campoTextoCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(campoTextoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoTextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoTextoCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoTextoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void campoTextoNombreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoTextoNombreMouseClicked
        if (this.campoTextoNombre.getText().equals("Buscar por Nombre")) {
            this.campoTextoNombre.setText("");
        }
    }//GEN-LAST:event_campoTextoNombreMouseClicked

    private void campoTextoCorreoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoTextoCorreoMouseClicked
        if (this.campoTextoCorreo.getText().equals("Buscar por Correo")) {
            this.campoTextoCorreo.setText("");
        }
    }//GEN-LAST:event_campoTextoCorreoMouseClicked

    private void campoTextoTelefonoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoTextoTelefonoMouseClicked
        if (this.campoTextoTelefono.getText().equals("Buscar por Telefono")) {
            this.campoTextoTelefono.setText("");
        }
    }//GEN-LAST:event_campoTextoTelefonoMouseClicked

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if (!isValidCampoNombre() && !isValidCampoCorreo() && !isValidCampoTelefono()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un criterio de búsqueda", "Error", JOptionPane.ERROR_MESSAGE);
            cargarClientes();
            return;
        }
        if (!isValidCampoNombre() && !isValidCampoCorreo() && isValidCampoTelefono()) {
            String telefono = campoTextoTelefono.getText().trim();
            List<Cliente> clientes = buscarClientesPorTelefono(telefono);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
        if (isValidCampoNombre() && !isValidCampoCorreo() && !isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            List<Cliente> clientes = buscarClientesPorNombre(nombre);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
        if (!isValidCampoNombre() && isValidCampoCorreo() && !isValidCampoTelefono()) {
            String correo = campoTextoCorreo.getText().trim();
            List<Cliente> clientes = buscarClientesPorCorreo(correo);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
        if (isValidCampoNombre() && isValidCampoCorreo() && !isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            String correo = campoTextoCorreo.getText().trim();
            List<Cliente> clientes = buscarClientesPorNombreYCorreo(nombre, correo);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
        if (!isValidCampoNombre() && isValidCampoCorreo() && isValidCampoTelefono()) {
            String telefono = campoTextoTelefono.getText().trim();
            String correo = campoTextoCorreo.getText().trim();
            List<Cliente> clientes = buscarClientesPorTelefonoYCorreo(telefono, correo);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
        if (isValidCampoNombre() && !isValidCampoCorreo() && isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            String telefono = campoTextoTelefono.getText().trim();
            List<Cliente> clientes = buscarClientesPorNombreYTelefono(nombre, telefono);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
        if (isValidCampoNombre() && isValidCampoCorreo() && isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            String telefono = campoTextoTelefono.getText().trim();
            String correo = campoTextoCorreo.getText().trim();
            List<Cliente> clientes = buscarClientesPorNombreTelefonoYCorreo(nombre, telefono, correo);
            if (clientes != null && !clientes.isEmpty()) {
                cargarPanelesClientes(clientes);
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Método para buscar clientes por teléfono.
     *
     * @param telefono el número de teléfono a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorTelefono(String telefono) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorTelefono(telefono);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre.
     *
     * @param nombre el nombre a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorNombre(String nombre) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombre(nombre);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por correo.
     *
     * @param correo el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorCorreo(String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorCorreo(correo);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre y teléfono.
     *
     * @param nombre el nombre a buscar.
     * @param telefono el número de teléfono a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorNombreYTelefono(String nombre, String telefono) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombreYTelefono(nombre, telefono);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre y correo.
     *
     * @param nombre el nombre a buscar.
     * @param correo el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorNombreYCorreo(String nombre, String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombreYCorreo(nombre, correo);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;

    }

    /**
     * Método para buscar clientes por teléfono y correo.
     *
     * @param telefono el número de teléfono a buscar.
     * @param correo el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorTelefonoYCorreo(String telefono, String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorTelefonoYCorreo(telefono, correo);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre, teléfono y correo.
     *
     * @param nombre el nombre a buscar.
     * @param telefono el número de teléfono a buscar.
     * @param correo el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<Cliente> buscarClientesPorNombreTelefonoYCorreo(String nombre, String telefono, String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<Cliente> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombreTelefonoYCorreo(nombre, telefono, correo);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return clientes;
    }

    /**
     * Método para validar el campo de texto de nombre.
     *
     * @return true si el campo es válido, false en caso contrario.
     */
    private boolean isValidCampoNombre() {
        if (campoTextoNombre.getText().isEmpty() || campoTextoNombre.getText().equals("Buscar por Nombre")) {
            return false;
        }
        return true;
    }

    /**
     * Método para validar el campo de texto de correo.
     *
     * @return true si el campo es válido, false en caso contrario.
     */
    private boolean isValidCampoCorreo() {
        if (campoTextoCorreo.getText().isEmpty() || campoTextoCorreo.getText().equals("Buscar por Correo")) {
            return false;
        }
        return true;
    }

    /**
     * Método para validar el campo de texto de teléfono.
     *
     * @return true si el campo es válido, false en caso contrario.
     */
    private boolean isValidCampoTelefono() {
        return !(campoTextoTelefono.getText().isEmpty() || campoTextoTelefono.getText().equals("Buscar por Telefono"));
    }

    public boolean isSelectionMode() {
        return selectionMode;
    }

    public void setSelectionMode(boolean selectionMode) {
        this.selectionMode = selectionMode;
        cargarClientes();
    }

    public Cliente getClienteSeleccionado() {
        return clienteSeleccionado;
    }

    public void setClienteSeleccionado(Cliente clienteSeleccionado) {
        this.clienteSeleccionado = clienteSeleccionado;
    }
    
    public void setModalClientes(ModalClientes modalClientes) {
        this.modalClientes = modalClientes;
    }

    public ModalClientes getModalClientes(){
        return modalClientes;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JTextField campoTextoCorreo;
    private javax.swing.JTextField campoTextoNombre;
    private javax.swing.JTextField campoTextoTelefono;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlClientes;
    // End of variables declaration//GEN-END:variables
}
