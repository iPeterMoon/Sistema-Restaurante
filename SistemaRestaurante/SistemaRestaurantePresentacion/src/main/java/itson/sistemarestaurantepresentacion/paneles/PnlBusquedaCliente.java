package itson.sistemarestaurantepresentacion.paneles;

import java.awt.Font;
import java.util.List;

import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import itson.sistemarestaurantedominio.dtos.ClienteDTO;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantenegocio.factory.ObjetosNegocioFactory;
import itson.sistemarestaurantenegocio.interfaces.IClientesBO;
import itson.sistemarestaurantepresentacion.modales.ModalClientes;

/**
 * Clase que representa el panel de busqueda de clientes. Este panel
 * contiene un campo de texto para buscar clientes por nombre, un
 * campo de texto para buscar por correo y otro para buscar por telefono,
 * contiene un panel que muestra los clientes encontrados.
 * Este panel es reutilizable y puede ser utilizado en diferentes modales o
 * ventanas de la aplicacion.
 * 
 * @author pc
 */
public class PnlBusquedaCliente extends javax.swing.JPanel {

    private ClienteDTO clienteSeleccionado = null;
    private boolean selectionMode = false;
    private ModalClientes modalClientes;

    /**
     * Creates new form PnlBusquedaCliente
     */
    public PnlBusquedaCliente() {
        initComponents();
        if (!java.beans.Beans.isDesignTime()) {
            cargarClientes();
            configurarEventos();
        }
    }

    /**
     * Método para cargar los clientes en el panel pnlClientes. Este método debe
     * ser llamado después de inicializar el componente.
     */
    private void cargarClientes() {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        try {
            List<ClienteDTO> clientes = clientesBO.obtenerClientesFrecuentes();
            cargarPanelesClientes(clientes);
        } catch (NegocioException ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Metodo para cargar los paneles de cada cliente dados por una lista
     *
     * @param clientes lista de clientes a cargar
     */
    private void cargarPanelesClientes(List<ClienteDTO> clientes) {
        pnlClientes.removeAll();
        for (ClienteDTO cliente : clientes) {
            PnlCliente pnlCliente = new PnlCliente(this, cliente);
            pnlClientes.add(pnlCliente);
            pnlClientes.add(Box.createVerticalStrut(30));
        }
        pnlClientes.repaint();
        pnlClientes.revalidate();
    }

    private void configurarEventos() {
        DocumentListener buscarlistener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                buscar();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                buscar();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                buscar();
            }
        };

        campoTextoNombre.getDocument().addDocumentListener(buscarlistener);
        campoTextoCorreo.getDocument().addDocumentListener(buscarlistener);
        campoTextoTelefono.getDocument().addDocumentListener(buscarlistener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        campoTextoNombre = new javax.swing.JTextField();
        campoTextoCorreo = new javax.swing.JTextField();
        campoTextoTelefono = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlClientes = new javax.swing.JPanel();

        setBackground(new java.awt.Color(31, 31, 31));

        campoTextoNombre.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoNombre.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoNombre.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoNombre.setText("Buscar por Nombre");
        campoTextoNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoNombreMouseClicked(evt);
            }
        });

        campoTextoCorreo.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoCorreo.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoCorreo.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoCorreo.setText("Buscar por Correo");
        campoTextoCorreo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoCorreoMouseClicked(evt);
            }
        });

        campoTextoTelefono.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoTelefono.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoTelefono.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoTelefono.setText("Buscar por Telefono");
        campoTextoTelefono.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoTelefonoMouseClicked(evt);
            }
        });

        jScrollPane1.setBorder(null);

        pnlClientes.setBackground(new java.awt.Color(31, 31, 31));
        pnlClientes.setLayout(new javax.swing.BoxLayout(pnlClientes, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pnlClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoTextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(campoTextoCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(campoTextoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(227, 227, 227)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoTextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoTextoCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoTextoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void campoTextoNombreMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_campoTextoNombreMouseClicked
        if (this.campoTextoNombre.getText().equals("Buscar por Nombre")) {
            this.campoTextoNombre.setText("");
        }
    }// GEN-LAST:event_campoTextoNombreMouseClicked

    private void campoTextoCorreoMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_campoTextoCorreoMouseClicked
        if (this.campoTextoCorreo.getText().equals("Buscar por Correo")) {
            this.campoTextoCorreo.setText("");
        }
    }// GEN-LAST:event_campoTextoCorreoMouseClicked

    private void campoTextoTelefonoMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_campoTextoTelefonoMouseClicked
        if (this.campoTextoTelefono.getText().equals("Buscar por Telefono")) {
            this.campoTextoTelefono.setText("");
        }
    }// GEN-LAST:event_campoTextoTelefonoMouseClicked

    private void buscar() {
        if (!isValidCampoNombre() && !isValidCampoCorreo() && !isValidCampoTelefono()) {
            cargarClientes();
            return;
        }

        List<ClienteDTO> clientes = null;

        if (!isValidCampoNombre() && !isValidCampoCorreo() && isValidCampoTelefono()) {
            String telefono = campoTextoTelefono.getText().trim();
            clientes = buscarClientesPorTelefono(telefono);
        } else if (isValidCampoNombre() && !isValidCampoCorreo() && !isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            clientes = buscarClientesPorNombre(nombre);
        } else if (!isValidCampoNombre() && isValidCampoCorreo() && !isValidCampoTelefono()) {
            String correo = campoTextoCorreo.getText().trim();
            clientes = buscarClientesPorCorreo(correo);
        } else if (isValidCampoNombre() && isValidCampoCorreo() && !isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            String correo = campoTextoCorreo.getText().trim();
            clientes = buscarClientesPorNombreYCorreo(nombre, correo);
        } else if (!isValidCampoNombre() && isValidCampoCorreo() && isValidCampoTelefono()) {
            String telefono = campoTextoTelefono.getText().trim();
            String correo = campoTextoCorreo.getText().trim();
            clientes = buscarClientesPorTelefonoYCorreo(telefono, correo);
        } else if (isValidCampoNombre() && !isValidCampoCorreo() && isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            String telefono = campoTextoTelefono.getText().trim();
            clientes = buscarClientesPorNombreYTelefono(nombre, telefono);
        } else if (isValidCampoNombre() && isValidCampoCorreo() && isValidCampoTelefono()) {
            String nombre = campoTextoNombre.getText().trim();
            String telefono = campoTextoTelefono.getText().trim();
            String correo = campoTextoCorreo.getText().trim();
            clientes = buscarClientesPorNombreTelefonoYCorreo(nombre, telefono, correo);
        }

        if (clientes != null && !clientes.isEmpty()) {
            cargarPanelesClientes(clientes);
        } else {
            mostrarMensajeNoClientesEncontrados();
        }
    }

    /**
     * Método para mostrar un mensaje en el panel cuando no se encuentran clientes.
     */
    private void mostrarMensajeNoClientesEncontrados() {
        pnlClientes.removeAll();
        JLabel mensaje = new JLabel("No se encontraron clientes.");
        mensaje.setFont(new Font("Poppins", Font.PLAIN, 20));
        mensaje.setForeground(new java.awt.Color(255, 255, 255)); // Color blanco
        pnlClientes.add(mensaje);
        pnlClientes.repaint();
        pnlClientes.revalidate();
    }

    /**
     * Método para buscar clientes por teléfono.
     *
     * @param telefono el número de teléfono a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorTelefono(String telefono) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorTelefono(telefono);
        } catch (NegocioException e) {

        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre.
     *
     * @param nombre el nombre a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorNombre(String nombre) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombre(nombre);
        } catch (NegocioException e) {
            JLabel info = new JLabel(e.getMessage());
            info.setFont(new Font("Poppins", Font.PLAIN, 20));
            pnlClientes.removeAll();
            pnlClientes.add(info);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por correo.
     *
     * @param correo el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorCorreo(String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorCorreo(correo);
        } catch (NegocioException e) {
            JLabel info = new JLabel(e.getMessage());
            info.setFont(new Font("Poppins", Font.PLAIN, 20));
            pnlClientes.removeAll();
            pnlClientes.add(info);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre y teléfono.
     *
     * @param nombre   el nombre a buscar.
     * @param telefono el número de teléfono a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorNombreYTelefono(String nombre, String telefono) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombreYTelefono(nombre, telefono);
        } catch (NegocioException e) {
            JLabel info = new JLabel(e.getMessage());
            info.setFont(new Font("Poppins", Font.PLAIN, 20));
            pnlClientes.removeAll();
            pnlClientes.add(info);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre y correo.
     *
     * @param nombre el nombre a buscar.
     * @param correo el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorNombreYCorreo(String nombre, String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombreYCorreo(nombre, correo);
        } catch (NegocioException e) {
            JLabel info = new JLabel(e.getMessage());
            info.setFont(new Font("Poppins", Font.PLAIN, 20));
            pnlClientes.removeAll();
            pnlClientes.add(info);
        }
        return clientes;

    }

    /**
     * Método para buscar clientes por teléfono y correo.
     *
     * @param telefono el número de teléfono a buscar.
     * @param correo   el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorTelefonoYCorreo(String telefono, String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorTelefonoYCorreo(telefono, correo);
        } catch (NegocioException e) {
            JLabel info = new JLabel(e.getMessage());
            info.setFont(new Font("Poppins", Font.PLAIN, 20));
            pnlClientes.removeAll();
            pnlClientes.add(info);
        }
        return clientes;
    }

    /**
     * Método para buscar clientes por nombre, teléfono y correo.
     *
     * @param nombre   el nombre a buscar.
     * @param telefono el número de teléfono a buscar.
     * @param correo   el correo a buscar.
     * @return lista de clientes encontrados.
     */
    private List<ClienteDTO> buscarClientesPorNombreTelefonoYCorreo(String nombre, String telefono, String correo) {
        IClientesBO clientesBO = ObjetosNegocioFactory.crearClientesBO();
        List<ClienteDTO> clientes = null;
        try {
            clientes = clientesBO.buscarClientesPorNombreTelefonoYCorreo(nombre, telefono, correo);
        } catch (NegocioException e) {
            JLabel info = new JLabel(e.getMessage());
            info.setFont(new Font("Poppins", Font.PLAIN, 20));
            pnlClientes.removeAll();
            pnlClientes.add(info);
        }
        return clientes;
    }

    /**
     * Método para validar el campo de texto de nombre.
     *
     * @return true si el campo es válido, false en caso contrario.
     */
    private boolean isValidCampoNombre() {
        if (campoTextoNombre.getText().isEmpty() || campoTextoNombre.getText().equals("Buscar por Nombre")) {
            return false;
        }
        return true;
    }

    /**
     * Método para validar el campo de texto de correo.
     *
     * @return true si el campo es válido, false en caso contrario.
     */
    private boolean isValidCampoCorreo() {
        if (campoTextoCorreo.getText().isEmpty() || campoTextoCorreo.getText().equals("Buscar por Correo")) {
            return false;
        }
        return true;
    }

    /**
     * Método para validar el campo de texto de teléfono.
     *
     * @return true si el campo es válido, false en caso contrario.
     */
    private boolean isValidCampoTelefono() {
        return !(campoTextoTelefono.getText().isEmpty() || campoTextoTelefono.getText().equals("Buscar por Telefono"));
    }

    /**
     * Metodo para saber si el panel está en modo seleccion
     * 
     * @return true si está en modo de selección, false en caso contrario
     */
    public boolean isSelectionMode() {
        return selectionMode;
    }

    /**
     * Método para establecer el modo de selección del panel.
     *
     * @param selectionMode true para habilitar el modo de selección, false para
     *                      deshabilitarlo.
     */
    public void setSelectionMode(boolean selectionMode) {
        this.selectionMode = selectionMode;
        cargarClientes();
    }

    /**
     * Método para obtener el cliente seleccionado.
     *
     * @return el cliente seleccionado.
     */
    public ClienteDTO getClienteSeleccionado() {
        return clienteSeleccionado;
    }

    /**
     * Método para establecer el cliente seleccionado.
     * 
     * @param clienteSeleccionado el cliente seleccionado.
     */
    public void setClienteSeleccionado(ClienteDTO clienteSeleccionado) {
        this.clienteSeleccionado = clienteSeleccionado;
    }

    /**
     * Método para establecer el modal de clientes.
     *
     * @param modalClientes el modal de clientes.
     */
    public void setModalClientes(ModalClientes modalClientes) {
        this.modalClientes = modalClientes;
    }

    /**
     * Método para obtener el modal de clientes.
     * 
     * @return el modal de clientes.
     */
    public ModalClientes getModalClientes() {
        return modalClientes;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campoTextoCorreo;
    private javax.swing.JTextField campoTextoNombre;
    private javax.swing.JTextField campoTextoTelefono;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlClientes;
    // End of variables declaration//GEN-END:variables
}
