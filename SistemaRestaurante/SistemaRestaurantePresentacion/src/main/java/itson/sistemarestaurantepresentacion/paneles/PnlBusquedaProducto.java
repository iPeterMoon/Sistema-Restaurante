package itson.sistemarestaurantepresentacion.paneles;

import java.awt.Font;
import java.util.List;

import javax.swing.JOptionPane;

import itson.sistemarestaurantedominio.dtos.ProductoDTO;
import itson.sistemarestaurantedominio.enumeradores.TipoProducto;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantenegocio.factory.ObjetosNegocioFactory;
import itson.sistemarestaurantenegocio.interfaces.IProductosBO;
import itson.sistemarestaurantepresentacion.modales.ModalProductos;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.Box;
import javax.swing.JPanel;

/**
 * PnlBusquedaProducto.java
 * Clase que representa el panel de busqueda de productos
 * Contiene los componentes necesarios para buscar productos
 * y mostrarlos en un panel
 * @author pc
 */
public class PnlBusquedaProducto extends javax.swing.JPanel {

    private boolean isSelectionMode = false;
    private ProductoDTO productoSeleccionado;
    private ModalProductos modal;

    /**
     * Creates new form PnlBusquedaProducto
     */
    public PnlBusquedaProducto() {
        initComponents();
        if (!java.beans.Beans.isDesignTime()) {
            this.cargarTodosProductos();
            cargarCategorias();
        }
    }
    
    /**
     * Metodo para cargar las categorias en el comboBox
     * Se obtienen las categorias de la enumeracion TipoProducto
     */
    private void cargarCategorias() {
        TipoProducto[] categorias = TipoProducto.values();
        this.comboBoxCategoria.removeAllItems();
        this.comboBoxCategoria.addItem("Seleccionar Categor√≠a");
        for (TipoProducto categoria : categorias) {
            this.comboBoxCategoria.addItem(categoria.toString().substring(0, 1).toUpperCase() + categoria.toString().substring(1).toLowerCase());
        }
    }

    /**
     * Metodo para cargar todos los productos en paneles, es llamado al iniciar
     * el panel
     */
    public void cargarTodosProductos() {
        IProductosBO productosBO = ObjetosNegocioFactory.crearProductosBO();
        List<ProductoDTO> productos = null;
        try {
            productos = productosBO.obtenerProductos();
        } catch (Exception e) {
            System.out.println("Error al cargar los productos: " + e.getMessage());
        }
        if (productos != null) {
            cargarPanelesProductos(productos);
        } else {
            System.out.println("No se encontraron productos.");
        }
    }

    /**
     * Metodo para cargar los productos en paneles
     *
     * @param productos lista de productos a cargar
     */
    public void cargarPanelesProductos(List<ProductoDTO> productos) {

        this.pnlProductos.removeAll();
        int contador = 1;
        JPanel pnlGridProductos = new JPanel();
        for (ProductoDTO producto : productos) {
            if (contador == 1) {
                pnlGridProductos = new JPanel();
                pnlGridProductos.setLayout(new GridLayout(0, 3, 25, 10));
                pnlGridProductos.setPreferredSize(new Dimension(1100, 250));
                pnlGridProductos.setMaximumSize(pnlGridProductos.getPreferredSize());
                pnlGridProductos.setBackground(new Color(31, 31, 31));

                pnlProductos.add(pnlGridProductos);
                pnlProductos.add(Box.createVerticalStrut(30));

            }
            PnlProducto pnlProducto = new PnlProducto(this, producto);
            pnlGridProductos.add(pnlProducto);
            pnlGridProductos.repaint();
            pnlGridProductos.revalidate();
            contador++;
            if (contador > 3) {
                contador = 1;
            }
        }
        pnlProductos.revalidate();
        pnlProductos.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPrincipal = new itson.sistemarestaurantepresentacion.recursos.RoundedPanel();
        btnBuscar = new javax.swing.JButton();
        campoTextoBuscar = new javax.swing.JTextField();
        comboBoxCategoria = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlProductos = new javax.swing.JPanel();

        setBackground(new java.awt.Color(37, 40, 54));

        pnlPrincipal.setBackground(new java.awt.Color(31, 31, 31));
        pnlPrincipal.setRoundBottomLeft(60);
        pnlPrincipal.setRoundBottomRight(60);
        pnlPrincipal.setRoundTopLeft(60);
        pnlPrincipal.setRoundTopRight(60);

        btnBuscar.setBackground(new java.awt.Color(80, 205, 137));
        btnBuscar.setFont(new Font("Poppins", Font.PLAIN, 16));
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        campoTextoBuscar.setBackground(new java.awt.Color(255, 255, 255));
        campoTextoBuscar.setFont(new Font("Poppins", Font.PLAIN, 16));
        campoTextoBuscar.setForeground(new java.awt.Color(0, 0, 0));
        campoTextoBuscar.setText("Buscar");
        campoTextoBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoTextoBuscarMouseClicked(evt);
            }
        });

        comboBoxCategoria.setBackground(new java.awt.Color(255, 255, 255));
        comboBoxCategoria.setFont(new Font("Poppins", Font.PLAIN, 18));
        comboBoxCategoria.setForeground(new java.awt.Color(0, 0, 0));
        comboBoxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jScrollPane1.setBackground(new java.awt.Color(31, 31, 31));
        jScrollPane1.setBorder(null);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(1120, 580));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(1120, 580));

        pnlProductos.setBackground(new java.awt.Color(31, 31, 31));
        pnlProductos.setLayout(new javax.swing.BoxLayout(pnlProductos, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pnlProductos);

        javax.swing.GroupLayout pnlPrincipalLayout = new javax.swing.GroupLayout(pnlPrincipal);
        pnlPrincipal.setLayout(pnlPrincipalLayout);
        pnlPrincipalLayout.setHorizontalGroup(
            pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlPrincipalLayout.createSequentialGroup()
                        .addComponent(campoTextoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboBoxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnlPrincipalLayout.setVerticalGroup(
            pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoTextoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void campoTextoBuscarMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_campoTextoBuscarMouseClicked
        if (this.campoTextoBuscar.getText().equals("Buscar")) {
            this.campoTextoBuscar.setText("");
        }
    }// GEN-LAST:event_campoTextoBuscarMouseClicked

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnBuscarActionPerformed
        if ((campoTextoBuscar.getText().isBlank() || campoTextoBuscar.getText().equals("Buscar"))
                && comboBoxCategoria.getSelectedItem().equals("Seleccionar Categor√≠a")) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un nombre o seleccione una categoria", "Error", JOptionPane.ERROR_MESSAGE);
            cargarTodosProductos();
        } else if (!campoTextoBuscar.getText().isBlank() && !campoTextoBuscar.getText().equals("Buscar")
                && comboBoxCategoria.getSelectedItem().equals("Seleccionar Categor√≠a")) {
            IProductosBO productosBO = ObjetosNegocioFactory.crearProductosBO();
            try {
                List<ProductoDTO> productos = productosBO.obtenerProductos(campoTextoBuscar.getText());
                if (productos != null) {
                    cargarPanelesProductos(productos);
                }
            } catch (NegocioException e) {
                JOptionPane.showMessageDialog(
                        this,
                        e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        } else if (!campoTextoBuscar.getText().isBlank() && !campoTextoBuscar.getText().equals("Buscar")
                && !comboBoxCategoria.getSelectedItem().equals("Seleccionar Categor√≠a")) {
            IProductosBO productosBO = ObjetosNegocioFactory.crearProductosBO();
            try {
                List<ProductoDTO> productos = productosBO.obtenerProductos(campoTextoBuscar.getText(), comboBoxCategoria.getSelectedItem().toString());
                if (productos != null) {
                    cargarPanelesProductos(productos);
                }
            } catch (NegocioException e) {
                JOptionPane.showMessageDialog(
                        this,
                        e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        } else if (!comboBoxCategoria.getSelectedItem().equals("Seleccionar Categor√≠a")
                && (campoTextoBuscar.getText().isBlank() || campoTextoBuscar.getText().equals("Buscar"))) {
            IProductosBO productosBO = ObjetosNegocioFactory.crearProductosBO();
            try {
                List<ProductoDTO> productos = productosBO.obtenerProductos(comboBoxCategoria.getSelectedItem().toString());
                if (productos != null) {
                    cargarPanelesProductos(productos);
                }
            } catch (NegocioException e) {
                JOptionPane.showMessageDialog(
                        this,
                        e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        };
    }// GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Metodo para obtener el producto seleccionado
     *
     * @return producto seleccionado
     */
    public ProductoDTO getProductoSeleccionado() {
        return productoSeleccionado;
    }

    /**
     * Metodo para establecer el producto seleccionado
     *
     * @param producto producto seleccionado
     */
    public void setProductoSeleccionado(ProductoDTO producto) {
        this.productoSeleccionado = producto;
    }

    /**
     * Metodo para establecer el modo de seleccion
     *
     * @param selectionMode modo de seleccion
     */
    public void setSelectionMode(boolean selectionMode) {
        this.isSelectionMode = selectionMode;
    }

    /**
     * Metodo para obtener el modo de seleccion
     *
     * @return modo de seleccion
     */
    public boolean isSelectionMode() {
        return isSelectionMode;
    }

    /**
     * Metodo para obtener el modal de productos
     * @return modal de productos
     */ 
    public ModalProductos getModal() {
        return modal;
    }

    /**
     * Metodo para establecer el modal de productos
     * @param modal modal de productos
     */
    public void setModal(ModalProductos modal) {
        this.modal = modal;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JTextField campoTextoBuscar;
    private javax.swing.JComboBox<String> comboBoxCategoria;
    private javax.swing.JScrollPane jScrollPane1;
    private itson.sistemarestaurantepresentacion.recursos.RoundedPanel pnlPrincipal;
    private javax.swing.JPanel pnlProductos;
    // End of variables declaration//GEN-END:variables
}
