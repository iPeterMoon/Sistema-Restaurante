package itson.sistemarestaurantepresentacion.pantallas;

import itson.sistemarestaurantedominio.Ingrediente;
import itson.sistemarestaurantedominio.dtos.NuevoIngredienteDTO;
import itson.sistemarestaurantedominio.enumeradores.UnidadMedida;
import itson.sistemarestaurantenegocio.excepciones.NegocioException;
import itson.sistemarestaurantenegocio.factory.ObjetosNegocioFactory;
import itson.sistemarestaurantenegocio.interfaces.IIngredientesBO;
import itson.sistemarestaurantepresentacion.control.ControlFlujo;
import java.awt.Font;
import javax.swing.JOptionPane;

/**
 *
 * @author PC
 */
public class PnlAgregarIngrediente extends javax.swing.JPanel {

    /**
     * Creates new form PnlAgregarIngrediente
     */
    public PnlAgregarIngrediente() {
        initComponents();
        cargarUnidadesMedida();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBienvenido = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        roundedPanel1 = new itson.sistemarestaurantepresentacion.recursos.RoundedPanel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblStock = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        comboBoxUnidadMedida = new javax.swing.JComboBox<>();
        lblUnidadMedida = new javax.swing.JLabel();
        btnAgregarIngrediente = new javax.swing.JButton();

        setBackground(new java.awt.Color(37, 40, 54));

        lblBienvenido.setFont(new Font("Poppins", Font.BOLD, 36));
        lblBienvenido.setForeground(new java.awt.Color(255, 255, 255));
        lblBienvenido.setText("Agregar Nuevo Ingrediente");

        btnCancelar.setBackground(new java.awt.Color(94, 94, 94));
        btnCancelar.setFont(new Font("Poppins", Font.PLAIN, 18));
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        roundedPanel1.setBackground(new java.awt.Color(31, 31, 31));
        roundedPanel1.setRoundBottomLeft(50);
        roundedPanel1.setRoundBottomRight(50);
        roundedPanel1.setRoundTopLeft(50);
        roundedPanel1.setRoundTopRight(50);

        lblNombre.setFont(new Font("Poppins", Font.PLAIN, 18));
        lblNombre.setForeground(new java.awt.Color(255, 255, 255));
        lblNombre.setText("Nombre *");

        txtNombre.setBackground(new java.awt.Color(255, 255, 255));
        txtNombre.setFont(new Font("Poppins", Font.PLAIN, 18));
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));

        lblStock.setFont(new Font("Poppins", Font.PLAIN, 18));
        lblStock.setForeground(new java.awt.Color(255, 255, 255));
        lblStock.setText("Cantidad en Stock inicial *");

        txtStock.setBackground(new java.awt.Color(255, 255, 255));
        txtStock.setFont(new Font("Poppins", Font.PLAIN, 18));
        txtStock.setForeground(new java.awt.Color(0, 0, 0));

        lblUnidadMedida.setFont(new Font("Poppins", Font.PLAIN, 18));
        lblUnidadMedida.setForeground(new java.awt.Color(255, 255, 255));
        lblUnidadMedida.setText("Unidad de Medida *");

        javax.swing.GroupLayout roundedPanel1Layout = new javax.swing.GroupLayout(roundedPanel1);
        roundedPanel1.setLayout(roundedPanel1Layout);
        roundedPanel1Layout.setHorizontalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombre)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundedPanel1Layout.createSequentialGroup()
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStock, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        roundedPanel1Layout.setVerticalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStock, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(134, Short.MAX_VALUE))
        );

        btnAgregarIngrediente.setBackground(new java.awt.Color(80, 205, 137));
        btnAgregarIngrediente.setFont(new Font("Poppins", Font.PLAIN, 18));
        btnAgregarIngrediente.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarIngrediente.setText("Agregar Ingrediente");
        btnAgregarIngrediente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregarIngrediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarIngredienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(lblBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 291, Short.MAX_VALUE)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(roundedPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgregarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(368, 368, 368))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(122, 122, 122)
                .addComponent(roundedPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(btnAgregarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        ControlFlujo.mostrarPnlIngredientes();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregarIngredienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarIngredienteActionPerformed
        Ingrediente ingrediente = agregarIngrediente();
        if (ingrediente != null) {
            mostrarPnlIngredientes();
        }
    }//GEN-LAST:event_btnAgregarIngredienteActionPerformed

    /**
     * Metodo que llena la informacion del combo box de Unidades de medida
     */
    public void cargarUnidadesMedida() {
        UnidadMedida[] unidadesMedida = UnidadMedida.values();
        this.comboBoxUnidadMedida.removeAllItems();
        this.comboBoxUnidadMedida.addItem("Seleccionar Unidad de medida");
        for (UnidadMedida unidad : unidadesMedida) {
            this.comboBoxUnidadMedida.addItem(unidad.toString());
        }
    }

    /**
     * Metodo para agregar un nuevo ingrediente. Obtiene los datos del
     * ingrediente desde los campos de texto y llama al metodo
     * agregarIngrediente de IIngredienteBO
     *
     * @return Ingrediente agregado en la base de datos.
     */
    private Ingrediente agregarIngrediente() {
        String nombre = txtNombre.getText();

        // Validar nombre
        if (!validarNombre(nombre)) {
            return null;
        }

        // Obtener el String seleccionado del JComboBox
        String selectedUnidad = (String) comboBoxUnidadMedida.getSelectedItem();

        // Validar unidad de medida seleccionada
        if (!validarUnidadMedida(selectedUnidad)) {
            return null;
        }

        // Convertir el String a UnidadMedida
        UnidadMedida unidadMedida = UnidadMedida.valueOf(selectedUnidad); // Conversión del String a UnidadMedida

        // Validar stock
        if (!validarStock(txtStock.getText())) {
            return null;
        }

        Integer stock = Integer.valueOf(txtStock.getText());

        IIngredientesBO ingredientesBO = ObjetosNegocioFactory.crearIngredientesBO();

        NuevoIngredienteDTO nuevoIngrediente = new NuevoIngredienteDTO(
                nombre, unidadMedida, stock);
        try {
            Ingrediente ingrediente = ingredientesBO.agregarIngrediente(nuevoIngrediente);
            // Muestra el mensaje de exito
            JOptionPane.showMessageDialog(this,
                    "Ingrediente registrado exitosamente", "Exito",
                    JOptionPane.INFORMATION_MESSAGE);
            return ingrediente;
        } catch (NegocioException e) {
            // Manejar la excepcion y mostrar el mensaje de error
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;

    }

    /**
     * Metodo que valida el campo del nombre del ingrediente
     *
     * @param nombre Nombre del ingrediente a validar
     * @return True si el formato del nombre es correcto, False en caso
     * contrario
     */
    private boolean validarNombre(String nombre) {
        // Validar si el nombre esta vacio
        if (nombre == null || nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre no puede estar vacio.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Validar que no contenga numeros ni caracteres especiales
        if (!nombre.matches("[a-zA-ZáéíóúÁÉÍÓÚÑñ ]+")) {
            JOptionPane.showMessageDialog(this,
                    "El nombre no puede contener numeros ni caracteres especiales.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Validar que el nombre no exceda los 50 caracteres
        if (nombre.length() > 50) {
            JOptionPane.showMessageDialog(this,
                    "El nombre no puede tener mas de 50 caracteres.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Metodo que valida el campo del comboBox de la unidad de medida del
     * ingrediente
     *
     * @param selectedUnidad Unidad de medida seleccionada en el comboBox
     * @return True si el formato de la unidad de medida es correcta, False en
     * caso contrario
     */
    private boolean validarUnidadMedida(String selectedUnidad) {
        // Validar que la unidad de medida no este vacia
        if (selectedUnidad == null || selectedUnidad.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Por favor, seleccione una unidad de medida.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Validar que la unidad de medda este en las opcones disponibles
        if (!selectedUnidad.equals("PIEZAS") && !selectedUnidad.equals("GRAMOS")
                && !selectedUnidad.equals("MILILITROS")) {
            JOptionPane.showMessageDialog(this,
                    "La unidad de medida seleccionada no es valida.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Metodo que valida el campo del stock del ingrediente
     *
     * @param stockStr Stock del ingrediente en string
     * @return True si el formato de la unidad de medida es correcta, False en
     * caso contrario
     */
    private boolean validarStock(String stockStr) {
        // Validar que el stock no este vacio
        if (stockStr == null || stockStr.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "El campo de stock no puede estar vacio.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Intentar convertir el stock a un numero entero
        try {
            Integer stock = Integer.valueOf(stockStr);
            // Validar que el stock no sea negativo
            if (stock < 0) {
                JOptionPane.showMessageDialog(this,
                        "El stock no puede ser negativo.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "El stock debe ser un numero entero valido.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Metodo para mostrar el panel de ingredientes. Se obtiene la instancia de
     * ControlFlujo y se llama al metodo mostrarPnlIngredientes.
     */
    private void mostrarPnlIngredientes() {
        ControlFlujo.mostrarPnlIngredientes();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarIngrediente;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox<String> comboBoxUnidadMedida;
    private javax.swing.JLabel lblBienvenido;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblStock;
    private javax.swing.JLabel lblUnidadMedida;
    private itson.sistemarestaurantepresentacion.recursos.RoundedPanel roundedPanel1;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
